<!DOCTYPE html>
<html>
  <head>
    <title>빈 페이지</title>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"
      integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+"
      crossorigin="anonymous"
    ></script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"
      crossorigin="anonymous"
    />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <style>
      body {
        background-color: white;
        margin: 0;
        padding: 0;
        height: 100%;
        display: flex;
        flex-direction: column;
      }
      form {
        position: fixed;
        bottom: 0;
        width: 100%;
        background-color: #fff;
        z-index: 1000;
      }
      ul {
        list-style-type: none;
        margin: 0;
        padding: 10px;
        overflow-y: scroll;
        height: calc(100vh - 100px); /* 화면 전체 높이에서 폼 높이를 뺀 값 */
        box-sizing: border-box;
        box-sizing: border-box;
        padding-bottom: 50px; /* 폼의 높이만큼 여백 추가 */
      }
      #nosuper {
        padding: 8px;
        margin-bottom: 6px;
        background: #fef01b;
        border-radius: 20px 20px 20px 20px;
        font-size: 12px;
        width: 70%;
        margin-left: auto;
      }
      #super {
        padding: 8px;
        margin-bottom: 6px;
        background: #ffffff;
        border-radius: 20px 20px 20px 20px;
        font-size: 12px;
        width: 70%;
      }
      input {
        padding: 20px;
        width: 80%;
      }
      button {
        padding: 8px;
      }

      #key {
        display: none;
      }
    </style>

    <script>
      window.onload = function () {
        document.getElementById("key").style.display = "none";
      };

      function handleVisibilityChange() {
        if (document.hidden) {
        } else {
          //location.reload(true);
          document.getElementById("key").style.display = "none";
        }
      }

      // 연속된 숫자를 저장할 변수
      let currentSequence = "";

      // 키 다운 이벤트 핸들러
      function handleKeyDown(event) {
        // 입력된 키가 숫자인지 확인
        const key = event.key;
        console.log(key);

        if (/\d/.test(key)) {
          // 숫자가 입력되면 현재 시퀀스에 추가
          currentSequence += key;

          // 현재 시퀀스의 길이를 확인
          if (currentSequence.length > 4) {
            // 4자리를 초과하면 가장 오래된 숫자를 제거
            currentSequence = currentSequence.slice(-4);
          }

          // 연속된 4자리 숫자가 확인되면 처리
          if (currentSequence.length === 4) {
            if (currentSequence == "8081") {
              document.body.style.backgroundColor = '#9bbbd4';
              document.getElementById("key").style.display = "block";
            }
            //console.log("Detected 4-digit sequence:", currentSequence);

            // 4자리 숫자를 발견했을 때의 처리 로직을 추가합니다.
            // 예를 들어, 페이지를 리디렉션하거나 알림을 표시할 수 있습니다.
            //alert("4-digit sequence detected: " + currentSequence);
          }
        } else {
          // 숫자가 아닌 키가 입력된 경우, 현재 시퀀스 초기화
          currentSequence = "";
        }
      }

      // 페이지가 로드될 때 이벤트 리스너 추가
      document.addEventListener("keydown", handleKeyDown);
      document.addEventListener("visibilitychange", handleVisibilityChange);

      let touchCount = 0;
      const maxTouches = 10;
      const touchInterval = 1300; // 2 seconds window to count touches
      let lastTouchTime = 0;
      let timeoutId;

      document.addEventListener("touchstart", (event) => {
        const currentTime = Date.now();

        if (currentTime - lastTouchTime > touchInterval) {
          // Reset touch count if the interval exceeds the defined window
          touchCount = 0;
        }

        lastTouchTime = currentTime;
        touchCount++;

        if (touchCount >= maxTouches) {
          console.log("10 touches detected!");
          document.body.style.backgroundColor = '#9bbbd4';
          document.getElementById("key").style.display = "block";
          touchCount = 0; // Optionally reset the count after detection
        }

        // Optionally, you can clear any existing timeout to keep counting within the interval
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
          touchCount = 0; // Reset count if interval expires
        }, touchInterval);
      });
    </script>
  </head>
  <body>
    <div id="key" style="width: 100%; height: 100%">
      <button
        style="width: 100%; margin: 8px"
        type="button"
        class="btn btn-danger"
        id="clear"
      >
        clear
      </button>
      <ul id="messages"></ul>

      <form id="form" action="">
        <div class="input-group mb-3">
          <input
            type="text"
            id="input"
            class="form-control"
            placeholder="내용을 입력하세요."
            aria-label="Recipient's username"
            aria-describedby="basic-addon2" 
            autocomplete='off'
          />
          <div class="input-group-append">
            <button type="submit" class="btn btn-primary">
              전송
            </button>
          </div>
          <div class="input-group-append">
            <label class="btn btn-outline-secondary">
              <input type="file" id="file-input" style="display: none;" />
              📎
            </label>
          </div>
        </div>
      </form>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();

      const form = document.getElementById("form");
      const input = document.getElementById("input");
      const messages = document.getElementById("messages");

      form.addEventListener("submit", function (e) {
        e.preventDefault();
        if (input.value) {
          const queryString = window.location.search;

          const urlParams = new URLSearchParams(queryString);

          // 특정 키의 값 가져오기 예시
          // 예를 들어, URL이 ?k=123&name=John 일 때
          const kValue = urlParams.get("k"); // '123'

          if (kValue == 123) {
            socket.emit("chat message", "*" + input.value);
          } else {
            socket.emit("chat message", input.value);
          }

          input.value = "";
        }
      });

      const clearBtn = document.getElementById("clear");
      console.log(clearBtn);
      clearBtn.addEventListener("click", function (e) {
        socket.emit("clear", "");
        location.reload(true);
      });

      socket.on("chat messages", function (msgs) {
        msgs.forEach(function (msg) {
          const item = document.createElement("li");
          console.log(msg.charAt(6));
          if (msg.charAt(6) == "*") {
            msg = msg.replace("*", "");
            item.id = "super";
          } else {
            item.id = "nosuper";
          }

          item.textContent = msg;

          messages.appendChild(item);
        });
        //window.scrollTo(0, document.body.scrollHeight);
        messages.scrollTop = messages.scrollHeight; // 마지막 메시지로 스크롤
      });

      socket.on("chat message", function (msg) {
        const item = document.createElement("li");
        if (msg.charAt(6) == "*") {
          msg = msg.replace("*", "");
          item.id = "super";
        } else {
          item.id = "nosuper";
        }

        item.textContent = msg;

        messages.appendChild(item);
        //window.scrollTo(0, document.body.scrollHeight);
        messages.scrollTop = messages.scrollHeight; // 마지막 메시지로 스크롤
        document.getElementById("input").focus();
      });

      // 이미지가 업로드 될 때마다 새로운 메시지로 추가
      socket.on('newImage', (data) => {
        const li = document.createElement("li");

        const img = document.createElement('img');
        img.src = data.imageUrl;
        img.style.maxWidth = '100%';  // 이미지 크기 조정
        img.style.height = 'auto';    // 비율 유지
        li.appendChild(img);
        
        messages.appendChild(li);
        document.getElementById("input").focus();
      });

     // 이미지 업로드 및 채팅 메시지 처리
    document.getElementById('file-input').addEventListener('change', function() {
      const file = this.files[0];
      if (file) {
        const formData = new FormData();
        formData.append('file', file);

        fetch('/upload', {
          method: 'POST',
          body: formData
        }).then(response => {
          if (response.ok) {
            console.log('File uploaded successfully');
          } else {
            console.error('File upload failed');
          }
        }).catch(error => {
          console.error('Error:', error);
        });
      }
    });
      
    </script>
  </body>
</html>
